-------------------------------------------------------------BETTER SOLUTION------------------------------------------------------------------------------------------
class Solution {
public:
    int maxIncreaseKeepingSkyline(vector<vector<int>>& grid) {
    int n = grid.size();
    vector<int> col(n, 0), row(n, 0);
        for(int i = 0; i<grid.size(); i++){
            for(int j = 0; j<grid.size(); j++){
                row[i] = max(row[i], grid[i][j]);
                col[j] = max(col[j], grid[i][j]);
            }
        }
        int sumTotal = 0;
        for(int i = 0; i<grid.size(); i++){
            for(int j = 0; j<grid.size(); j++){
                int value = min(row[i], col[j]);
                sumTotal += value - grid[i][j];
            }
        }
        return sumTotal;
    }
};

-------------------------------------------------------------------SECOND SOLUTION--------------------------------------------------------------------------------------
class Solution {
private:
    int findMax(int i, int j, vector<vector<int>> &grid){
        int maxRow = 0;
        for(int k = 0; k<grid.size(); k++){
            if(grid[i][k]>maxRow){
                maxRow = grid[i][k];
            }
        }
        int maxCol = 0;
        for(int v = 0; v<grid.size(); v++){
            if(grid[v][j]>maxCol){
                maxCol = grid[v][j];
            }
        }
        return min(maxRow, maxCol);
    }
    
public:
    int maxIncreaseKeepingSkyline(vector<vector<int>>& grid) {
        int sumTotal = 0;
        for(int i = 0; i<grid.size(); i++){
            for(int j = 0; j<grid.size(); j++){
                int value = findMax(i, j, grid);
                sumTotal += value - grid[i][j];
            }
        }
        return sumTotal;
    }
};
